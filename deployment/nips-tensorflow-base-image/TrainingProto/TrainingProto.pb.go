// Code generated by protoc-gen-go. DO NOT EDIT.
// source: TrainingProto.proto

package TrainingProto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event_Event int32

const (
	Event_UPDATE    Event_Event = 0
	Event_NVIDIASMI Event_Event = 1
)

var Event_Event_name = map[int32]string{
	0: "UPDATE",
	1: "NVIDIASMI",
}
var Event_Event_value = map[string]int32{
	"UPDATE":    0,
	"NVIDIASMI": 1,
}

func (x Event_Event) String() string {
	return proto.EnumName(Event_Event_name, int32(x))
}
func (Event_Event) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_TrainingProto_e13c49b2aa1c48d0, []int{0, 0}
}

type TrainingJob_Status int32

const (
	TrainingJob_INIT     TrainingJob_Status = 0
	TrainingJob_RUNNING  TrainingJob_Status = 1
	TrainingJob_FINISHED TrainingJob_Status = 2
	TrainingJob_CRASHED  TrainingJob_Status = 3
)

var TrainingJob_Status_name = map[int32]string{
	0: "INIT",
	1: "RUNNING",
	2: "FINISHED",
	3: "CRASHED",
}
var TrainingJob_Status_value = map[string]int32{
	"INIT":     0,
	"RUNNING":  1,
	"FINISHED": 2,
	"CRASHED":  3,
}

func (x TrainingJob_Status) String() string {
	return proto.EnumName(TrainingJob_Status_name, int32(x))
}
func (TrainingJob_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_TrainingProto_e13c49b2aa1c48d0, []int{1, 0}
}

// Represents an event cause by the server.
//
// event describes the resolved Event and data represents the given payload.
type Event struct {
	Event                Event_Event `protobuf:"varint,1,opt,name=event,proto3,enum=Event_Event" json:"event,omitempty"`
	Data                 []byte      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_TrainingProto_e13c49b2aa1c48d0, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (dst *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(dst, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetEvent() Event_Event {
	if m != nil {
		return m.Event
	}
	return Event_UPDATE
}

func (m *Event) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Represents a training with all information regarding the training.
//
// status - represents the current status, which can be running (RUNNING), sucessfully finished training
// (FINISHED), crashed training job (CRASHED), initialized client (INIT)
// modelId - represents the unique id of the training process
// startTime - start time of the job
// stopTime - stop time of the job
// log - represents the log generated by the training job
type TrainingJob struct {
	ModelId              string             `protobuf:"bytes,1,opt,name=modelId,proto3" json:"modelId,omitempty"`
	StartTime            int64              `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	StopTime             int64              `protobuf:"varint,3,opt,name=stopTime,proto3" json:"stopTime,omitempty"`
	Status               TrainingJob_Status `protobuf:"varint,4,opt,name=status,proto3,enum=TrainingJob_Status" json:"status,omitempty"`
	Log                  string             `protobuf:"bytes,5,opt,name=log,proto3" json:"log,omitempty"`
	NvidiasmiLog         string             `protobuf:"bytes,6,opt,name=nvidiasmiLog,proto3" json:"nvidiasmiLog,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TrainingJob) Reset()         { *m = TrainingJob{} }
func (m *TrainingJob) String() string { return proto.CompactTextString(m) }
func (*TrainingJob) ProtoMessage()    {}
func (*TrainingJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_TrainingProto_e13c49b2aa1c48d0, []int{1}
}
func (m *TrainingJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrainingJob.Unmarshal(m, b)
}
func (m *TrainingJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrainingJob.Marshal(b, m, deterministic)
}
func (dst *TrainingJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrainingJob.Merge(dst, src)
}
func (m *TrainingJob) XXX_Size() int {
	return xxx_messageInfo_TrainingJob.Size(m)
}
func (m *TrainingJob) XXX_DiscardUnknown() {
	xxx_messageInfo_TrainingJob.DiscardUnknown(m)
}

var xxx_messageInfo_TrainingJob proto.InternalMessageInfo

func (m *TrainingJob) GetModelId() string {
	if m != nil {
		return m.ModelId
	}
	return ""
}

func (m *TrainingJob) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *TrainingJob) GetStopTime() int64 {
	if m != nil {
		return m.StopTime
	}
	return 0
}

func (m *TrainingJob) GetStatus() TrainingJob_Status {
	if m != nil {
		return m.Status
	}
	return TrainingJob_INIT
}

func (m *TrainingJob) GetLog() string {
	if m != nil {
		return m.Log
	}
	return ""
}

func (m *TrainingJob) GetNvidiasmiLog() string {
	if m != nil {
		return m.NvidiasmiLog
	}
	return ""
}

// Represents a response.
//
// success is true, if the request was processed successfully.
type Response struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_TrainingProto_e13c49b2aa1c48d0, []int{2}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*Event)(nil), "Event")
	proto.RegisterType((*TrainingJob)(nil), "TrainingJob")
	proto.RegisterType((*Response)(nil), "Response")
	proto.RegisterEnum("Event_Event", Event_Event_name, Event_Event_value)
	proto.RegisterEnum("TrainingJob_Status", TrainingJob_Status_name, TrainingJob_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TrainingProtoClient is the client API for TrainingProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrainingProtoClient interface {
	// Registers the started training at the server.
	//
	// A Response object with success 'true' is returned, if
	// the training was registered. Otherwise 'false'.
	RegisterTraining(ctx context.Context, in *TrainingJob, opts ...grpc.CallOption) (*Response, error)
	// Notifies the server, that the initializiation of the client has finished.
	//
	// A Response object with success 'true' is returned, if
	// the server received the event. Otherwise 'false'.
	FinishInit(ctx context.Context, in *TrainingJob, opts ...grpc.CallOption) (*Response, error)
	// Notifies the server, that the training has started.
	//
	// A Response object with success 'true' is returend, if
	// the server received the event. Otherwise 'false'.
	TrainingStart(ctx context.Context, in *TrainingJob, opts ...grpc.CallOption) (*Response, error)
	// Updates the started training at the server,
	//
	// A Response object with success 'true' is returned, if the
	// training was updated. Otherwise 'false'.
	UpdateTraining(ctx context.Context, in *TrainingJob, opts ...grpc.CallOption) (*Response, error)
	// Sends the server a request to receive an event-stream.
	// The event stream has orders from the server to the client.
	//
	// A stream of Event is returned.
	ReceiveEvent(ctx context.Context, in *TrainingJob, opts ...grpc.CallOption) (TrainingProto_ReceiveEventClient, error)
	// Notifies the server,that the training process has crashed or successfully finished.
	//
	// A Response object with success 'true' is returned, if
	// the server has received the event. Otherwise 'false'.
	FinishTraining(ctx context.Context, in *TrainingJob, opts ...grpc.CallOption) (*Response, error)
}

type trainingProtoClient struct {
	cc *grpc.ClientConn
}

func NewTrainingProtoClient(cc *grpc.ClientConn) TrainingProtoClient {
	return &trainingProtoClient{cc}
}

func (c *trainingProtoClient) RegisterTraining(ctx context.Context, in *TrainingJob, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/TrainingProto/RegisterTraining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingProtoClient) FinishInit(ctx context.Context, in *TrainingJob, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/TrainingProto/FinishInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingProtoClient) TrainingStart(ctx context.Context, in *TrainingJob, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/TrainingProto/TrainingStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingProtoClient) UpdateTraining(ctx context.Context, in *TrainingJob, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/TrainingProto/UpdateTraining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingProtoClient) ReceiveEvent(ctx context.Context, in *TrainingJob, opts ...grpc.CallOption) (TrainingProto_ReceiveEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TrainingProto_serviceDesc.Streams[0], "/TrainingProto/ReceiveEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &trainingProtoReceiveEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TrainingProto_ReceiveEventClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type trainingProtoReceiveEventClient struct {
	grpc.ClientStream
}

func (x *trainingProtoReceiveEventClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *trainingProtoClient) FinishTraining(ctx context.Context, in *TrainingJob, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/TrainingProto/FinishTraining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainingProtoServer is the server API for TrainingProto service.
type TrainingProtoServer interface {
	// Registers the started training at the server.
	//
	// A Response object with success 'true' is returned, if
	// the training was registered. Otherwise 'false'.
	RegisterTraining(context.Context, *TrainingJob) (*Response, error)
	// Notifies the server, that the initializiation of the client has finished.
	//
	// A Response object with success 'true' is returned, if
	// the server received the event. Otherwise 'false'.
	FinishInit(context.Context, *TrainingJob) (*Response, error)
	// Notifies the server, that the training has started.
	//
	// A Response object with success 'true' is returend, if
	// the server received the event. Otherwise 'false'.
	TrainingStart(context.Context, *TrainingJob) (*Response, error)
	// Updates the started training at the server,
	//
	// A Response object with success 'true' is returned, if the
	// training was updated. Otherwise 'false'.
	UpdateTraining(context.Context, *TrainingJob) (*Response, error)
	// Sends the server a request to receive an event-stream.
	// The event stream has orders from the server to the client.
	//
	// A stream of Event is returned.
	ReceiveEvent(*TrainingJob, TrainingProto_ReceiveEventServer) error
	// Notifies the server,that the training process has crashed or successfully finished.
	//
	// A Response object with success 'true' is returned, if
	// the server has received the event. Otherwise 'false'.
	FinishTraining(context.Context, *TrainingJob) (*Response, error)
}

func RegisterTrainingProtoServer(s *grpc.Server, srv TrainingProtoServer) {
	s.RegisterService(&_TrainingProto_serviceDesc, srv)
}

func _TrainingProto_RegisterTraining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingProtoServer).RegisterTraining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TrainingProto/RegisterTraining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingProtoServer).RegisterTraining(ctx, req.(*TrainingJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingProto_FinishInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingProtoServer).FinishInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TrainingProto/FinishInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingProtoServer).FinishInit(ctx, req.(*TrainingJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingProto_TrainingStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingProtoServer).TrainingStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TrainingProto/TrainingStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingProtoServer).TrainingStart(ctx, req.(*TrainingJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingProto_UpdateTraining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingProtoServer).UpdateTraining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TrainingProto/UpdateTraining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingProtoServer).UpdateTraining(ctx, req.(*TrainingJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingProto_ReceiveEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrainingJob)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrainingProtoServer).ReceiveEvent(m, &trainingProtoReceiveEventServer{stream})
}

type TrainingProto_ReceiveEventServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type trainingProtoReceiveEventServer struct {
	grpc.ServerStream
}

func (x *trainingProtoReceiveEventServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _TrainingProto_FinishTraining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingProtoServer).FinishTraining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TrainingProto/FinishTraining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingProtoServer).FinishTraining(ctx, req.(*TrainingJob))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrainingProto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TrainingProto",
	HandlerType: (*TrainingProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterTraining",
			Handler:    _TrainingProto_RegisterTraining_Handler,
		},
		{
			MethodName: "FinishInit",
			Handler:    _TrainingProto_FinishInit_Handler,
		},
		{
			MethodName: "TrainingStart",
			Handler:    _TrainingProto_TrainingStart_Handler,
		},
		{
			MethodName: "UpdateTraining",
			Handler:    _TrainingProto_UpdateTraining_Handler,
		},
		{
			MethodName: "FinishTraining",
			Handler:    _TrainingProto_FinishTraining_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveEvent",
			Handler:       _TrainingProto_ReceiveEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "TrainingProto.proto",
}

func init() { proto.RegisterFile("TrainingProto.proto", fileDescriptor_TrainingProto_e13c49b2aa1c48d0) }

var fileDescriptor_TrainingProto_e13c49b2aa1c48d0 = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x6b, 0xdb, 0x40,
	0x10, 0xd5, 0x87, 0xad, 0x48, 0x13, 0x25, 0x88, 0xc9, 0x45, 0x84, 0x1e, 0xc2, 0x52, 0xa8, 0x69,
	0xa8, 0x28, 0xe9, 0xad, 0x37, 0x53, 0x3b, 0xed, 0x96, 0x56, 0x84, 0x95, 0xdc, 0xbb, 0x2c, 0x2d,
	0xea, 0x82, 0xad, 0x15, 0xda, 0xb5, 0xcf, 0xfd, 0x17, 0xfd, 0xbb, 0x45, 0xab, 0x2a, 0xb6, 0x2f,
	0xc6, 0x97, 0x65, 0x66, 0xde, 0xe3, 0xbd, 0x79, 0xd2, 0xc0, 0x5d, 0xde, 0x15, 0xa2, 0x11, 0x4d,
	0xfd, 0xd2, 0x49, 0x2d, 0x93, 0xb6, 0x7f, 0x49, 0x09, 0xd3, 0xe5, 0x9e, 0x37, 0x1a, 0x09, 0x4c,
	0x79, 0x5f, 0xc4, 0xf6, 0x83, 0x3d, 0xbb, 0x7d, 0x0a, 0x13, 0x33, 0x1e, 0x5e, 0x36, 0x40, 0x88,
	0x30, 0xa9, 0x0a, 0x5d, 0xc4, 0xce, 0x83, 0x3d, 0x0b, 0x99, 0xa9, 0x09, 0x19, 0x05, 0x00, 0xbc,
	0xd5, 0xcb, 0x62, 0x9e, 0x2f, 0x23, 0x0b, 0x6f, 0x20, 0x48, 0x7f, 0xd1, 0x05, 0x9d, 0x67, 0x3f,
	0x69, 0x64, 0x93, 0x3f, 0x0e, 0x5c, 0x8f, 0xe6, 0xdf, 0xe5, 0x1a, 0x63, 0xb8, 0xda, 0xca, 0x8a,
	0x6f, 0x68, 0x65, 0xdc, 0x02, 0x36, 0xb6, 0xf8, 0x06, 0x02, 0xa5, 0x8b, 0x4e, 0xe7, 0x62, 0xcb,
	0x8d, 0x8d, 0xcb, 0x0e, 0x03, 0xbc, 0x07, 0x5f, 0x69, 0xd9, 0x1a, 0xd0, 0x35, 0xe0, 0x6b, 0x8f,
	0x8f, 0xe0, 0x29, 0x5d, 0xe8, 0x9d, 0x8a, 0x27, 0x26, 0xc0, 0x5d, 0x72, 0xe4, 0x98, 0x64, 0x06,
	0x62, 0xff, 0x29, 0x18, 0x81, 0xbb, 0x91, 0x75, 0x3c, 0x35, 0xe6, 0x7d, 0x89, 0x04, 0xc2, 0x66,
	0x2f, 0x2a, 0x51, 0xa8, 0xad, 0xf8, 0x21, 0xeb, 0xd8, 0x33, 0xd0, 0xc9, 0x8c, 0x7c, 0x06, 0x6f,
	0xd0, 0x41, 0x1f, 0x26, 0x34, 0xa5, 0x79, 0x64, 0xe1, 0x35, 0x5c, 0xb1, 0x55, 0x9a, 0xd2, 0xf4,
	0x6b, 0x64, 0x63, 0x08, 0xfe, 0x33, 0x4d, 0x69, 0xf6, 0x6d, 0xb9, 0x88, 0x9c, 0x1e, 0xfa, 0xc2,
	0xe6, 0xa6, 0x71, 0xc9, 0x5b, 0xf0, 0x19, 0x57, 0xad, 0x6c, 0x14, 0xef, 0xe3, 0xab, 0x5d, 0x59,
	0x72, 0xa5, 0x4c, 0x7c, 0x9f, 0x8d, 0xed, 0xd3, 0x5f, 0x07, 0x6e, 0x4e, 0xfe, 0x12, 0x7e, 0x80,
	0x88, 0xf1, 0x5a, 0x28, 0xcd, 0xbb, 0x11, 0xc0, 0xf0, 0x38, 0xda, 0x7d, 0x90, 0x8c, 0xc2, 0xc4,
	0xc2, 0x77, 0x00, 0xcf, 0xa2, 0x11, 0xea, 0x37, 0x6d, 0x84, 0x3e, 0x47, 0x7c, 0x7f, 0x30, 0xca,
	0xfa, 0xef, 0x7b, 0x8e, 0xfb, 0x08, 0xb7, 0xab, 0xb6, 0x2a, 0x34, 0xbf, 0x64, 0x83, 0x19, 0x84,
	0x8c, 0x97, 0x5c, 0xec, 0xf9, 0x70, 0x16, 0xa7, 0x54, 0x6f, 0x38, 0x28, 0x62, 0x7d, 0xb4, 0x7b,
	0xd9, 0x61, 0xd7, 0x0b, 0x64, 0xd7, 0x9e, 0x39, 0xd7, 0x4f, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x73, 0x15, 0x58, 0xec, 0xc5, 0x02, 0x00, 0x00,
}
