// Code generated by protoc-gen-go. DO NOT EDIT.
// source: TrainingProto.proto

package TrainingProto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Represents an event cause by the server.
//
// event describes the resolved Event and data represents the given payload.
type Event struct {
	Event                string   `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_TrainingProto_38af8293a7064cf1, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (dst *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(dst, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *Event) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Represents a training with all information regarding the training.
//
// stopTime may be 0, if training hasn't finished yet.
type TrainingJob struct {
	TrainingId           string   `protobuf:"bytes,1,opt,name=trainingId,proto3" json:"trainingId,omitempty"`
	StartTime            int64    `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	StopTime             int64    `protobuf:"varint,3,opt,name=stopTime,proto3" json:"stopTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrainingJob) Reset()         { *m = TrainingJob{} }
func (m *TrainingJob) String() string { return proto.CompactTextString(m) }
func (*TrainingJob) ProtoMessage()    {}
func (*TrainingJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_TrainingProto_38af8293a7064cf1, []int{1}
}
func (m *TrainingJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrainingJob.Unmarshal(m, b)
}
func (m *TrainingJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrainingJob.Marshal(b, m, deterministic)
}
func (dst *TrainingJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrainingJob.Merge(dst, src)
}
func (m *TrainingJob) XXX_Size() int {
	return xxx_messageInfo_TrainingJob.Size(m)
}
func (m *TrainingJob) XXX_DiscardUnknown() {
	xxx_messageInfo_TrainingJob.DiscardUnknown(m)
}

var xxx_messageInfo_TrainingJob proto.InternalMessageInfo

func (m *TrainingJob) GetTrainingId() string {
	if m != nil {
		return m.TrainingId
	}
	return ""
}

func (m *TrainingJob) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *TrainingJob) GetStopTime() int64 {
	if m != nil {
		return m.StopTime
	}
	return 0
}

// Represents a response.
//
// success is true, if the request was processed successfully.
type Response struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_TrainingProto_38af8293a7064cf1, []int{2}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*Event)(nil), "Event")
	proto.RegisterType((*TrainingJob)(nil), "TrainingJob")
	proto.RegisterType((*Response)(nil), "Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TrainingProtoClient is the client API for TrainingProto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrainingProtoClient interface {
	// Registers the started training at the server.
	//
	// A Response object with success 'true' is returned, if
	// the training was registered. Otherwise 'false'.
	RegisterTraining(ctx context.Context, in *TrainingJob, opts ...grpc.CallOption) (*Response, error)
	// Updates the started training at the server,
	//
	// A Respone object with responseString 'true' is returned, if the
	// training was updated. Otherwise 'false'.
	UpdateTraining(ctx context.Context, in *TrainingJob, opts ...grpc.CallOption) (*Response, error)
	// Sends the server a request to receive an event-stream.
	// The event stream has orders from the server to the client.
	//
	// A stream of Event is returned.
	ReceiveEvents(ctx context.Context, in *TrainingJob, opts ...grpc.CallOption) (TrainingProto_ReceiveEventsClient, error)
}

type trainingProtoClient struct {
	cc *grpc.ClientConn
}

func NewTrainingProtoClient(cc *grpc.ClientConn) TrainingProtoClient {
	return &trainingProtoClient{cc}
}

func (c *trainingProtoClient) RegisterTraining(ctx context.Context, in *TrainingJob, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/TrainingProto/RegisterTraining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingProtoClient) UpdateTraining(ctx context.Context, in *TrainingJob, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/TrainingProto/UpdateTraining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingProtoClient) ReceiveEvents(ctx context.Context, in *TrainingJob, opts ...grpc.CallOption) (TrainingProto_ReceiveEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TrainingProto_serviceDesc.Streams[0], "/TrainingProto/ReceiveEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &trainingProtoReceiveEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TrainingProto_ReceiveEventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type trainingProtoReceiveEventsClient struct {
	grpc.ClientStream
}

func (x *trainingProtoReceiveEventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TrainingProtoServer is the server API for TrainingProto service.
type TrainingProtoServer interface {
	// Registers the started training at the server.
	//
	// A Response object with success 'true' is returned, if
	// the training was registered. Otherwise 'false'.
	RegisterTraining(context.Context, *TrainingJob) (*Response, error)
	// Updates the started training at the server,
	//
	// A Respone object with responseString 'true' is returned, if the
	// training was updated. Otherwise 'false'.
	UpdateTraining(context.Context, *TrainingJob) (*Response, error)
	// Sends the server a request to receive an event-stream.
	// The event stream has orders from the server to the client.
	//
	// A stream of Event is returned.
	ReceiveEvents(*TrainingJob, TrainingProto_ReceiveEventsServer) error
}

func RegisterTrainingProtoServer(s *grpc.Server, srv TrainingProtoServer) {
	s.RegisterService(&_TrainingProto_serviceDesc, srv)
}

func _TrainingProto_RegisterTraining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingProtoServer).RegisterTraining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TrainingProto/RegisterTraining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingProtoServer).RegisterTraining(ctx, req.(*TrainingJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingProto_UpdateTraining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingProtoServer).UpdateTraining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TrainingProto/UpdateTraining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingProtoServer).UpdateTraining(ctx, req.(*TrainingJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrainingProto_ReceiveEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrainingJob)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrainingProtoServer).ReceiveEvents(m, &trainingProtoReceiveEventsServer{stream})
}

type TrainingProto_ReceiveEventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type trainingProtoReceiveEventsServer struct {
	grpc.ServerStream
}

func (x *trainingProtoReceiveEventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

var _TrainingProto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TrainingProto",
	HandlerType: (*TrainingProtoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterTraining",
			Handler:    _TrainingProto_RegisterTraining_Handler,
		},
		{
			MethodName: "UpdateTraining",
			Handler:    _TrainingProto_UpdateTraining_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveEvents",
			Handler:       _TrainingProto_ReceiveEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "TrainingProto.proto",
}

func init() { proto.RegisterFile("TrainingProto.proto", fileDescriptor_TrainingProto_38af8293a7064cf1) }

var fileDescriptor_TrainingProto_38af8293a7064cf1 = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xcf, 0x4e, 0xc3, 0x30,
	0x0c, 0xc6, 0x17, 0xc6, 0x46, 0x6b, 0x36, 0x84, 0x0c, 0x87, 0x6a, 0x42, 0x68, 0x8a, 0x38, 0x0c,
	0x21, 0x2a, 0xfe, 0x3c, 0x03, 0x07, 0x38, 0xa1, 0x68, 0x3c, 0x40, 0xd6, 0x5a, 0x55, 0x0e, 0x34,
	0x55, 0x6d, 0xf6, 0x28, 0x3c, 0x2f, 0x9a, 0x59, 0x60, 0x70, 0xda, 0x25, 0xf2, 0xef, 0xfb, 0x9c,
	0x2f, 0xb1, 0xe1, 0x6c, 0xd9, 0xfb, 0xd0, 0x86, 0xb6, 0x79, 0xed, 0xa3, 0xc4, 0xb2, 0xdb, 0x9c,
	0xf6, 0x1e, 0x46, 0x4f, 0x6b, 0x6a, 0x05, 0xcf, 0x61, 0x44, 0x9b, 0xa2, 0x30, 0x73, 0xb3, 0xc8,
	0xdd, 0x37, 0x20, 0xc2, 0x61, 0xed, 0xc5, 0x17, 0x07, 0x73, 0xb3, 0x98, 0x38, 0xad, 0x6d, 0x03,
	0xc7, 0x29, 0xe9, 0x25, 0xae, 0xf0, 0x12, 0x40, 0xb6, 0xf8, 0x5c, 0x6f, 0x6f, 0xef, 0x28, 0x78,
	0x01, 0x39, 0x8b, 0xef, 0x65, 0x19, 0xde, 0x49, 0x73, 0x86, 0xee, 0x57, 0xc0, 0x19, 0x64, 0x2c,
	0xb1, 0x53, 0x73, 0xa8, 0xe6, 0x0f, 0xdb, 0x2b, 0xc8, 0x1c, 0x71, 0x17, 0x5b, 0x26, 0x2c, 0xe0,
	0x88, 0x3f, 0xaa, 0x8a, 0x98, 0xf5, 0x89, 0xcc, 0x25, 0x7c, 0xf8, 0x34, 0x30, 0xfd, 0x33, 0x19,
	0xde, 0xc2, 0xa9, 0xa3, 0x26, 0xb0, 0x50, 0x9f, 0x0c, 0x9c, 0x94, 0x3b, 0x7f, 0x9e, 0xe5, 0x65,
	0x0a, 0xb6, 0x03, 0xbc, 0x81, 0x93, 0xb7, 0xae, 0xf6, 0x42, 0xfb, 0x34, 0x5f, 0xc3, 0xd4, 0x51,
	0x45, 0x61, 0x4d, 0xba, 0x36, 0xfe, 0xd7, 0x3b, 0x2e, 0x55, 0xb6, 0x83, 0x3b, 0xb3, 0x1a, 0xeb,
	0x86, 0x1f, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x84, 0xec, 0x95, 0x0f, 0x78, 0x01, 0x00, 0x00,
}
