syntax = "proto3";

service TrainingProto {
    // Registers the started training at the server.
    //
    // A Response object with success 'true' is returned, if
    // the training was registered. Otherwise 'false'.
    rpc RegisterTraining (TrainingJob) returns (Response) {
    }

    rpc FinishInit (TrainingJob) returns (Response){
    }

    rpc TrainingStart (TrainingJob) returns (Response){

    }
    // Updates the started training at the server,
    //
    // A Respone object with responseString 'true' is returned, if the
    // training was updated. Otherwise 'false'.
    rpc UpdateTraining (TrainingJob) returns (Response) {
    }

    // Sends the server a request to receive an event-stream.
    // The event stream has orders from the server to the client.
    //
    // A stream of Event is returned. 
    rpc ReceiveEvents (TrainingJob) returns (stream Event) {
    }
    
    rpc FinishTraining (TrainingJob) returns (Response) {
    }
}

// Represents an event cause by the server.
//
// event describes the resolved Event and data represents the given payload.
message Event {
    string event = 1;
    bytes data = 2;
}

// Represents a training with all information regarding the training.
//
// status - represents the current status, which can be running (RUNNING), sucessfully finished training
// (FINISHED) and crashed training job (CRASHED)
// modelId - represents the unique id of the training process
// startTime - start time of the job
// stopTime - stop time of the job
// log - represents the log generated by the training job
message TrainingJob {
    enum Status {
        INIT = 0;
        RUNNING = 1;
        FINISHED = 2;
        CRASHED = 3;
    }

    string modelId = 1;
    int64 startTime = 2;
    int64 stopTime = 3;
    Status status = 4;
    string log = 5;
}

// Represents a response.
//
// success is true, if the request was processed successfully.
message Response {
    bool success = 1;
}
