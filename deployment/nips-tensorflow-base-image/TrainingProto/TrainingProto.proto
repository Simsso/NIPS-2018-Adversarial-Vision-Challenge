syntax = "proto3";

service TrainingProto {
    // Registers the started training at the server.
    //
    // A Response object with success 'true' is returned, if
    // the training was registered. Otherwise 'false'.
    rpc RegisterTraining (TrainingJob) returns (Response) {
    }

    // Updates the started training at the server,
    //
    // A Respone object with responseString 'true' is returned, if the
    // training was updated. Otherwise 'false'.
    rpc UpdateTraining (TrainingJob) returns (Response) {
    }

    // Sends the server a request to receive an event-stream.
    // The event stream has orders from the server to the client.
    //
    // A stream of Event is returned. 
    rpc ReceiveEvents (TrainingJob) returns (stream Event) {
    }
}

// Represents an event cause by the server.
//
// event describes the resolved Event and data represents the given payload.
message Event {
    string event = 1;
    bytes data = 2;
}

// Represents a training with all information regarding the training.
//
// stopTime may be 0, if training hasn't finished yet.
message TrainingJob {
    string trainingId = 1;
    int64 startTime = 2;
    int64 stopTime = 3;

}

// Represents a response.
//
// success is true, if the request was processed successfully.
message Response {
    bool success = 1;
}
