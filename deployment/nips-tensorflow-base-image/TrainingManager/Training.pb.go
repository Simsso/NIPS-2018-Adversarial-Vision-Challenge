// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Training.proto

package Training

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Represents a training with all information regarding the training.
//
// stopTime may be 0, if training hasn't finished yet.
type TrainingJob struct {
	TrainingId           string   `protobuf:"bytes,1,opt,name=trainingId,proto3" json:"trainingId,omitempty"`
	StartTime            int64    `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
	StopTime             int64    `protobuf:"varint,3,opt,name=stopTime,proto3" json:"stopTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrainingJob) Reset()         { *m = TrainingJob{} }
func (m *TrainingJob) String() string { return proto.CompactTextString(m) }
func (*TrainingJob) ProtoMessage()    {}
func (*TrainingJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_Training_da489077c16d052a, []int{0}
}
func (m *TrainingJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrainingJob.Unmarshal(m, b)
}
func (m *TrainingJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrainingJob.Marshal(b, m, deterministic)
}
func (dst *TrainingJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrainingJob.Merge(dst, src)
}
func (m *TrainingJob) XXX_Size() int {
	return xxx_messageInfo_TrainingJob.Size(m)
}
func (m *TrainingJob) XXX_DiscardUnknown() {
	xxx_messageInfo_TrainingJob.DiscardUnknown(m)
}

var xxx_messageInfo_TrainingJob proto.InternalMessageInfo

func (m *TrainingJob) GetTrainingId() string {
	if m != nil {
		return m.TrainingId
	}
	return ""
}

func (m *TrainingJob) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *TrainingJob) GetStopTime() int64 {
	if m != nil {
		return m.StopTime
	}
	return 0
}

type Response struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_Training_da489077c16d052a, []int{1}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*TrainingJob)(nil), "TrainingJob")
	proto.RegisterType((*Response)(nil), "Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TrainingClient is the client API for Training service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrainingClient interface {
	// Registers the started training at the server.
	//
	// A Response object with success 'true' is returned, if
	// the training was registered. Otherwise 'false'.
	RegisterTraining(ctx context.Context, in *TrainingJob, opts ...grpc.CallOption) (*Response, error)
	// Updates the started traing at the server,
	//
	// A Respone object with responseString 'true' is returned, if the
	// training was updated. Otherwise 'false'.
	UpdateTraining(ctx context.Context, in *TrainingJob, opts ...grpc.CallOption) (*Response, error)
}

type trainingClient struct {
	cc *grpc.ClientConn
}

func NewTrainingClient(cc *grpc.ClientConn) TrainingClient {
	return &trainingClient{cc}
}

func (c *trainingClient) RegisterTraining(ctx context.Context, in *TrainingJob, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Training/RegisterTraining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainingClient) UpdateTraining(ctx context.Context, in *TrainingJob, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Training/UpdateTraining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrainingServer is the server API for Training service.
type TrainingServer interface {
	// Registers the started training at the server.
	//
	// A Response object with success 'true' is returned, if
	// the training was registered. Otherwise 'false'.
	RegisterTraining(context.Context, *TrainingJob) (*Response, error)
	// Updates the started traing at the server,
	//
	// A Respone object with responseString 'true' is returned, if the
	// training was updated. Otherwise 'false'.
	UpdateTraining(context.Context, *TrainingJob) (*Response, error)
}

func RegisterTrainingServer(s *grpc.Server, srv TrainingServer) {
	s.RegisterService(&_Training_serviceDesc, srv)
}

func _Training_RegisterTraining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingServer).RegisterTraining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Training/RegisterTraining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingServer).RegisterTraining(ctx, req.(*TrainingJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _Training_UpdateTraining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainingServer).UpdateTraining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Training/UpdateTraining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainingServer).UpdateTraining(ctx, req.(*TrainingJob))
	}
	return interceptor(ctx, in, info, handler)
}

var _Training_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Training",
	HandlerType: (*TrainingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterTraining",
			Handler:    _Training_RegisterTraining_Handler,
		},
		{
			MethodName: "UpdateTraining",
			Handler:    _Training_UpdateTraining_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Training.proto",
}

func init() { proto.RegisterFile("Training.proto", fileDescriptor_Training_da489077c16d052a) }

var fileDescriptor_Training_da489077c16d052a = []byte{
	// 181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x0b, 0x29, 0x4a, 0xcc,
	0xcc, 0xcb, 0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x4a, 0xe7, 0xe2, 0x86, 0x89,
	0x78, 0xe5, 0x27, 0x09, 0xc9, 0x71, 0x71, 0x95, 0x40, 0xb9, 0x9e, 0x29, 0x12, 0x8c, 0x0a, 0x8c,
	0x1a, 0x9c, 0x41, 0x48, 0x22, 0x42, 0x32, 0x5c, 0x9c, 0xc5, 0x25, 0x89, 0x45, 0x25, 0x21, 0x99,
	0xb9, 0xa9, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x08, 0x01, 0x21, 0x29, 0x2e, 0x8e, 0xe2,
	0x92, 0xfc, 0x02, 0xb0, 0x24, 0x33, 0x58, 0x12, 0xce, 0x57, 0x52, 0xe1, 0xe2, 0x08, 0x4a, 0x2d,
	0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0x92, 0xe0, 0x62, 0x2f, 0x2e, 0x4d, 0x4e, 0x4e, 0x2d, 0x2e,
	0x06, 0x5b, 0xc1, 0x11, 0x04, 0xe3, 0x1a, 0xa5, 0x71, 0x71, 0xc0, 0x9c, 0x23, 0xa4, 0xcb, 0x25,
	0x10, 0x94, 0x9a, 0x9e, 0x59, 0x5c, 0x92, 0x5a, 0x04, 0x17, 0xe3, 0xd1, 0x43, 0x72, 0xad, 0x14,
	0xa7, 0x1e, 0xcc, 0x48, 0x25, 0x06, 0x21, 0x6d, 0x2e, 0xbe, 0xd0, 0x82, 0x94, 0xc4, 0x92, 0x54,
	0x22, 0x14, 0x27, 0xb1, 0x81, 0x7d, 0x6f, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x73, 0x85, 0x81,
	0x92, 0x0f, 0x01, 0x00, 0x00,
}
